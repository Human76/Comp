/* A Bison parser, made by GNU Bison 2.5.  */

/* Skeleton implementation for Bison LALR(1) parsers in Java
   
      Copyright (C) 2007-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* First part of user declarations.  */

/* Line 32 of lalr1.java  */
/* Line 1 of "ph2.yacc"  */

  import java.io.*;


/**
 * A Bison parser, automatically generated from <tt>ph2.yacc</tt>.
 *
 * @author LALR (1) parser skeleton written by Paolo Bonzini.
 */
class YYParser
{
    /** Version number for the Bison executable that generated this parser.  */
  public static final String bisonVersion = "2.5";

  /** Name of the skeleton that generated this parser.  */
  public static final String bisonSkeleton = "lalr1.java";


  /** True if verbose error messages are enabled.  */
  public boolean errorVerbose = false;



  /** Token returned by the scanner to signal the end of its input.  */
  public static final int EOF = 0;

/* Tokens.  */
  /** Token number, to be returned by the scanner.  */
  public static final int LETTER = 258;
  /** Token number, to be returned by the scanner.  */
  public static final int WHITESPACE = 259;
  /** Token number, to be returned by the scanner.  */
  public static final int NUM = 260;
  /** Token number, to be returned by the scanner.  */
  public static final int SEMICOLON = 261;
  /** Token number, to be returned by the scanner.  */
  public static final int COLON = 262;
  /** Token number, to be returned by the scanner.  */
  public static final int COMMA = 263;
  /** Token number, to be returned by the scanner.  */
  public static final int LP = 264;
  /** Token number, to be returned by the scanner.  */
  public static final int RP = 265;
  /** Token number, to be returned by the scanner.  */
  public static final int LB = 266;
  /** Token number, to be returned by the scanner.  */
  public static final int RB = 267;
  /** Token number, to be returned by the scanner.  */
  public static final int LCB = 268;
  /** Token number, to be returned by the scanner.  */
  public static final int RCB = 269;
  /** Token number, to be returned by the scanner.  */
  public static final int DOT = 270;
  /** Token number, to be returned by the scanner.  */
  public static final int PLUSPLUS = 271;
  /** Token number, to be returned by the scanner.  */
  public static final int MINUSMINUS = 272;
  /** Token number, to be returned by the scanner.  */
  public static final int ASSIGN = 273;
  /** Token number, to be returned by the scanner.  */
  public static final int LE = 274;
  /** Token number, to be returned by the scanner.  */
  public static final int LT = 275;
  /** Token number, to be returned by the scanner.  */
  public static final int GE = 276;
  /** Token number, to be returned by the scanner.  */
  public static final int GT = 277;
  /** Token number, to be returned by the scanner.  */
  public static final int EQUAL = 278;
  /** Token number, to be returned by the scanner.  */
  public static final int NOT_EQUAL = 279;
  /** Token number, to be returned by the scanner.  */
  public static final int ADD = 280;
  /** Token number, to be returned by the scanner.  */
  public static final int SUB = 281;
  /** Token number, to be returned by the scanner.  */
  public static final int MUL = 282;
  /** Token number, to be returned by the scanner.  */
  public static final int DIV = 283;
  /** Token number, to be returned by the scanner.  */
  public static final int MOD = 284;
  /** Token number, to be returned by the scanner.  */
  public static final int ADDE = 285;
  /** Token number, to be returned by the scanner.  */
  public static final int SUBE = 286;
  /** Token number, to be returned by the scanner.  */
  public static final int MULE = 287;
  /** Token number, to be returned by the scanner.  */
  public static final int DIVE = 288;
  /** Token number, to be returned by the scanner.  */
  public static final int QUEST = 289;
  /** Token number, to be returned by the scanner.  */
  public static final int ANDAND = 290;
  /** Token number, to be returned by the scanner.  */
  public static final int OROR = 291;
  /** Token number, to be returned by the scanner.  */
  public static final int TILDA = 292;
  /** Token number, to be returned by the scanner.  */
  public static final int AND = 293;
  /** Token number, to be returned by the scanner.  */
  public static final int OR = 294;
  /** Token number, to be returned by the scanner.  */
  public static final int STATIC_KW = 295;
  /** Token number, to be returned by the scanner.  */
  public static final int INTEGER_KW = 296;
  /** Token number, to be returned by the scanner.  */
  public static final int BOOLEAN_KW = 297;
  /** Token number, to be returned by the scanner.  */
  public static final int INT_KW = 298;
  /** Token number, to be returned by the scanner.  */
  public static final int CHAR_KW = 299;
  /** Token number, to be returned by the scanner.  */
  public static final int CHARACTER_KW = 300;
  /** Token number, to be returned by the scanner.  */
  public static final int BOOL_KW = 301;
  /** Token number, to be returned by the scanner.  */
  public static final int VOID_KW = 302;
  /** Token number, to be returned by the scanner.  */
  public static final int IF_KW = 303;
  /** Token number, to be returned by the scanner.  */
  public static final int THEN_KW = 304;
  /** Token number, to be returned by the scanner.  */
  public static final int ELSE_KW = 305;
  /** Token number, to be returned by the scanner.  */
  public static final int OTHER_KW = 306;
  /** Token number, to be returned by the scanner.  */
  public static final int TILL_KW = 307;
  /** Token number, to be returned by the scanner.  */
  public static final int COMEBACK_KW = 308;
  /** Token number, to be returned by the scanner.  */
  public static final int GIVEBACK_KW = 309;
  /** Token number, to be returned by the scanner.  */
  public static final int CONTINUE_KW = 310;
  /** Token number, to be returned by the scanner.  */
  public static final int CONST_KW = 311;
  /** Token number, to be returned by the scanner.  */
  public static final int TRUE_KW = 312;
  /** Token number, to be returned by the scanner.  */
  public static final int FALSE_KW = 313;
  /** Token number, to be returned by the scanner.  */
  public static final int COMMENT = 314;



  

  /**
   * Communication interface between the scanner and the Bison-generated
   * parser <tt>YYParser</tt>.
   */
  public interface Lexer {
    

    /**
     * Method to retrieve the semantic value of the last scanned token.
     * @return the semantic value of the last scanned token.  */
    Object getLVal ();

    /**
     * Entry point for the scanner.  Returns the token identifier corresponding
     * to the next token and prepares to return the semantic value
     * of the token.
     * @return the token identifier corresponding to the next token. */
    int yylex () throws java.io.IOException;

    /**
     * Entry point for error reporting.  Emits an error
     * in a user-defined way.
     *
     * 
     * @param s The string for the error message.  */
     void yyerror (String s);
  }

  /** The object doing lexical analysis for us.  */
  private Lexer yylexer;
  
  



  /**
   * Instantiates the Bison-generated parser.
   * @param yylexer The scanner that will supply tokens to the parser.
   */
  public YYParser (Lexer yylexer) {
    this.yylexer = yylexer;
    
  }

  private java.io.PrintStream yyDebugStream = System.err;

  /**
   * Return the <tt>PrintStream</tt> on which the debugging output is
   * printed.
   */
  public final java.io.PrintStream getDebugStream () { return yyDebugStream; }

  /**
   * Set the <tt>PrintStream</tt> on which the debug output is printed.
   * @param s The stream that is used for debugging output.
   */
  public final void setDebugStream(java.io.PrintStream s) { yyDebugStream = s; }

  private int yydebug = 1;

  /**
   * Answer the verbosity of the debugging output; 0 means that all kinds of
   * output from the parser are suppressed.
   */
  public final int getDebugLevel() { return yydebug; }

  /**
   * Set the verbosity of the debugging output; 0 means that all kinds of
   * output from the parser are suppressed.
   * @param level The verbosity level for debugging output.
   */
  public final void setDebugLevel(int level) { yydebug = level; }

  private final int yylex () throws java.io.IOException {
    return yylexer.yylex ();
  }
  protected final void yyerror (String s) {
    yylexer.yyerror (s);
  }

  

  protected final void yycdebug (String s) {
    if (yydebug > 0)
      yyDebugStream.println (s);
  }

  private final class YYStack {
    private int[] stateStack = new int[16];
    
    private Object[] valueStack = new Object[16];

    public int size = 16;
    public int height = -1;

    public final void push (int state, Object value			    ) {
      height++;
      if (size == height)
        {
	  int[] newStateStack = new int[size * 2];
	  System.arraycopy (stateStack, 0, newStateStack, 0, height);
	  stateStack = newStateStack;
	  

	  Object[] newValueStack = new Object[size * 2];
	  System.arraycopy (valueStack, 0, newValueStack, 0, height);
	  valueStack = newValueStack;

	  size *= 2;
	}

      stateStack[height] = state;
      
      valueStack[height] = value;
    }

    public final void pop () {
      pop (1);
    }

    public final void pop (int num) {
      // Avoid memory leaks... garbage collection is a white lie!
      if (num > 0) {
	java.util.Arrays.fill (valueStack, height - num + 1, height + 1, null);
        
      }
      height -= num;
    }

    public final int stateAt (int i) {
      return stateStack[height - i];
    }

    public final Object valueAt (int i) {
      return valueStack[height - i];
    }

    // Print the state stack on the debug stream.
    public void print (java.io.PrintStream out)
    {
      out.print ("Stack now");

      for (int i = 0; i <= height; i++)
        {
	  out.print (' ');
	  out.print (stateStack[i]);
        }
      out.println ();
    }
  }

  /**
   * Returned by a Bison action in order to stop the parsing process and
   * return success (<tt>true</tt>).  */
  public static final int YYACCEPT = 0;

  /**
   * Returned by a Bison action in order to stop the parsing process and
   * return failure (<tt>false</tt>).  */
  public static final int YYABORT = 1;

  /**
   * Returned by a Bison action in order to start error recovery without
   * printing an error message.  */
  public static final int YYERROR = 2;

  // Internal return codes that are not supported for user semantic
  // actions.
  private static final int YYERRLAB = 3;
  private static final int YYNEWSTATE = 4;
  private static final int YYDEFAULT = 5;
  private static final int YYREDUCE = 6;
  private static final int YYERRLAB1 = 7;
  private static final int YYRETURN = 8;

  private int yyerrstatus_ = 0;

  /**
   * Return whether error recovery is being done.  In this state, the parser
   * reads token until it reaches a known state, and then restarts normal
   * operation.  */
  public final boolean recovering ()
  {
    return yyerrstatus_ == 0;
  }

  private int yyaction (int yyn, YYStack yystack, int yylen) 
  {
    Object yyval;
    

    /* If YYLEN is nonzero, implement the default value of the action:
       `$$ = $1'.  Otherwise, use the top of the stack.

       Otherwise, the following line sets YYVAL to garbage.
       This behavior is undocumented and Bison
       users should not rely upon it.  */
    if (yylen > 0)
      yyval = yystack.valueAt (yylen - 1);
    else
      yyval = yystack.valueAt (0);

    yy_reduce_print (yyn, yystack);

    switch (yyn)
      {
	  case 2:
  if (yyn == 2)
    
/* Line 351 of lalr1.java  */
/* Line 64 of "ph2.yacc"  */
    {
        System.out.println("Rule 1.1: " +
            "num → NUM num2");
    };
  break;
    

  case 3:
  if (yyn == 3)
    
/* Line 351 of lalr1.java  */
/* Line 70 of "ph2.yacc"  */
    {
        System.out.println("Rule 12.1: " +
            "num2 → num num2");
    };
  break;
    

  case 4:
  if (yyn == 4)
    
/* Line 351 of lalr1.java  */
/* Line 74 of "ph2.yacc"  */
    {
        System.out.println("Rule 12.2: " +
            "num2 → ϵ");
    };
  break;
    

  case 5:
  if (yyn == 5)
    
/* Line 351 of lalr1.java  */
/* Line 81 of "ph2.yacc"  */
    {
        System.out.println("Rule 2.1: " +
            "letter → LETTER letter2");
    };
  break;
    

  case 6:
  if (yyn == 6)
    
/* Line 351 of lalr1.java  */
/* Line 87 of "ph2.yacc"  */
    {
        System.out.println("Rule 13.1: " +
            "letter2 → letter letter2");
    };
  break;
    

  case 7:
  if (yyn == 7)
    
/* Line 351 of lalr1.java  */
/* Line 91 of "ph2.yacc"  */
    {
        System.out.println("Rule 13.2: " +
            "letter2 → ϵ");
    };
  break;
    

  case 8:
  if (yyn == 8)
    
/* Line 351 of lalr1.java  */
/* Line 98 of "ph2.yacc"  */
    {
        System.out.println("Rule 3.1: " +
            "numOrletter → num");
    };
  break;
    

  case 9:
  if (yyn == 9)
    
/* Line 351 of lalr1.java  */
/* Line 102 of "ph2.yacc"  */
    {
        System.out.println("Rule 3.2: " +
            "numOrletter → letter");
    };
  break;
    

  case 10:
  if (yyn == 10)
    
/* Line 351 of lalr1.java  */
/* Line 106 of "ph2.yacc"  */
    {
        System.out.println("Rule 15.2: " +
            "numOrletter → ϵ");
    };
  break;
    

  case 11:
  if (yyn == 11)
    
/* Line 351 of lalr1.java  */
/* Line 113 of "ph2.yacc"  */
    {
        System.out.println("Rule 29.1: " +
            "program → list");
    };
  break;
    

  case 12:
  if (yyn == 12)
    
/* Line 351 of lalr1.java  */
/* Line 119 of "ph2.yacc"  */
    {
        System.out.println("Rule 4.1: " +
            "list → declaration list2");
    };
  break;
    

  case 13:
  if (yyn == 13)
    
/* Line 351 of lalr1.java  */
/* Line 126 of "ph2.yacc"  */
    {
        System.out.println("Rule 5.1: " +
            "listOfParameters → paramTypeList listOfParameters2");
    };
  break;
    

  case 14:
  if (yyn == 14)
    
/* Line 351 of lalr1.java  */
/* Line 132 of "ph2.yacc"  */
    {
        System.out.println("Rule 6.1: " +
            "paramList → paramId paramList2");
    };
  break;
    

  case 15:
  if (yyn == 15)
    
/* Line 351 of lalr1.java  */
/* Line 138 of "ph2.yacc"  */
    {
        System.out.println("Rule 7.1: " +
            "localDeclarations → ε localDeclarations2");
    };
  break;
    

  case 16:
  if (yyn == 16)
    
/* Line 351 of lalr1.java  */
/* Line 144 of "ph2.yacc"  */
    {
        System.out.println("Rule 8.1: " +
            "statementList → ε statementList2");
    };
  break;
    

  case 17:
  if (yyn == 17)
    
/* Line 351 of lalr1.java  */
/* Line 150 of "ph2.yacc"  */
    {
        System.out.println("Rule 10.1: " +
            "mathEXP → unaryExpression mathEXP2");
    };
  break;
    

  case 18:
  if (yyn == 18)
    
/* Line 351 of lalr1.java  */
/* Line 156 of "ph2.yacc"  */
    {
        System.out.println("Rule 11.1: " +
            "arguments → allExpression arguments2");
    };
  break;
    

  case 19:
  if (yyn == 19)
    
/* Line 351 of lalr1.java  */
/* Line 164 of "ph2.yacc"  */
    {
        System.out.println("Rule 15.1: " +
            "list2 → declaration list2");
    };
  break;
    

  case 20:
  if (yyn == 20)
    
/* Line 351 of lalr1.java  */
/* Line 168 of "ph2.yacc"  */
    {
        System.out.println("Rule 15.2: " +
            "list2 → ϵ");
    };
  break;
    

  case 21:
  if (yyn == 21)
    
/* Line 351 of lalr1.java  */
/* Line 174 of "ph2.yacc"  */
    {
        System.out.println("Rule 16.1: " +
            "listOfParameters2 → ; paramTypeList listOfParameters2");
    };
  break;
    

  case 22:
  if (yyn == 22)
    
/* Line 351 of lalr1.java  */
/* Line 178 of "ph2.yacc"  */
    {
        System.out.println("Rule 16.2: " +
            "listOfParameters2 → ϵ");
    };
  break;
    

  case 23:
  if (yyn == 23)
    
/* Line 351 of lalr1.java  */
/* Line 184 of "ph2.yacc"  */
    {
        System.out.println("Rule 17.1: " +
            "paramList2 → , paramId paramList2");
    };
  break;
    

  case 24:
  if (yyn == 24)
    
/* Line 351 of lalr1.java  */
/* Line 188 of "ph2.yacc"  */
    {
        System.out.println("Rule 17.2: " +
            "paramList2 → ϵ");
    };
  break;
    

  case 25:
  if (yyn == 25)
    
/* Line 351 of lalr1.java  */
/* Line 194 of "ph2.yacc"  */
    {
        System.out.println("Rule 18.1: " +
            "localDeclarations2 → ScopedVariableDec localDeclarations2");
    };
  break;
    

  case 26:
  if (yyn == 26)
    
/* Line 351 of lalr1.java  */
/* Line 198 of "ph2.yacc"  */
    {
        System.out.println("Rule 18.2: " +
            "localDeclarations2 → ϵ");
    };
  break;
    

  case 27:
  if (yyn == 27)
    
/* Line 351 of lalr1.java  */
/* Line 204 of "ph2.yacc"  */
    {
        System.out.println("Rule 19.1: " +
            "statementList2 → statement statementList2");
    };
  break;
    

  case 28:
  if (yyn == 28)
    
/* Line 351 of lalr1.java  */
/* Line 208 of "ph2.yacc"  */
    {
        System.out.println("Rule 19.2: " +
            "statementList2 → ϵ");
    };
  break;
    

  case 29:
  if (yyn == 29)
    
/* Line 351 of lalr1.java  */
/* Line 214 of "ph2.yacc"  */
    {
        System.out.println("Rule 20.1: " +
            "mathEXP2 → op mathEXP mathEXP2");
    };
  break;
    

  case 30:
  if (yyn == 30)
    
/* Line 351 of lalr1.java  */
/* Line 218 of "ph2.yacc"  */
    {
        System.out.println("Rule 20.2: " +
            "mathEXP2 → ϵ");
    };
  break;
    

  case 31:
  if (yyn == 31)
    
/* Line 351 of lalr1.java  */
/* Line 224 of "ph2.yacc"  */
    {
        System.out.println("Rule 21.1: " +
            "arguments2 → , allExpression arguments2");
    };
  break;
    

  case 32:
  if (yyn == 32)
    
/* Line 351 of lalr1.java  */
/* Line 228 of "ph2.yacc"  */
    {
        System.out.println("Rule 21.2: " +
            "arguments2 → ϵ");
    };
  break;
    

  case 33:
  if (yyn == 33)
    
/* Line 351 of lalr1.java  */
/* Line 235 of "ph2.yacc"  */
    {
        System.out.println("Rule 25.1: " +
            "alterable → letter numOrletter alterable3");
    };
  break;
    

  case 34:
  if (yyn == 34)
    
/* Line 351 of lalr1.java  */
/* Line 241 of "ph2.yacc"  */
    {
        System.out.println("Rule 26.1: " +
            "alterable2 → [ allExpression ]");
    };
  break;
    

  case 35:
  if (yyn == 35)
    
/* Line 351 of lalr1.java  */
/* Line 245 of "ph2.yacc"  */
    {
        System.out.println("Rule 26.2: " +
            "alterable2 → . letter numOrletter");
    };
  break;
    

  case 36:
  if (yyn == 36)
    
/* Line 351 of lalr1.java  */
/* Line 251 of "ph2.yacc"  */
    {
        System.out.println("Rule 28.1: " +
            "alterable3 → alterable2 alterable3");
    };
  break;
    

  case 37:
  if (yyn == 37)
    
/* Line 351 of lalr1.java  */
/* Line 255 of "ph2.yacc"  */
    {
        System.out.println("Rule 28.2: " +
            "alterable3 → ϵ");
    };
  break;
    

  case 38:
  if (yyn == 38)
    
/* Line 351 of lalr1.java  */
/* Line 262 of "ph2.yacc"  */
    {
        System.out.println("Rule 30.1: " +
            "declaration → function ");
    };
  break;
    

  case 39:
  if (yyn == 39)
    
/* Line 351 of lalr1.java  */
/* Line 266 of "ph2.yacc"  */
    {
        System.out.println("Rule 30.2: " +
            "declaration → varDeclaration");
    };
  break;
    

  case 40:
  if (yyn == 40)
    
/* Line 351 of lalr1.java  */
/* Line 272 of "ph2.yacc"  */
    {
        System.out.println("Rule 31.1: " +
            "varDeclaration → type variableList;");
    };
  break;
    

  case 41:
  if (yyn == 41)
    
/* Line 351 of lalr1.java  */
/* Line 278 of "ph2.yacc"  */
    {
        System.out.println("Rule 32.1: " +
            "ScopedVariableDec → scopedSpecifier  variableList;");
    };
  break;
    

  case 42:
  if (yyn == 42)
    
/* Line 351 of lalr1.java  */
/* Line 284 of "ph2.yacc"  */
    {
        System.out.println("Rule 33.1: " +
            "scopedSpecifier → static type ");
    };
  break;
    

  case 43:
  if (yyn == 43)
    
/* Line 351 of lalr1.java  */
/* Line 288 of "ph2.yacc"  */
    {
        System.out.println("Rule 33.2: " +
            "scopedSpecifier → type");
    };
  break;
    

  case 44:
  if (yyn == 44)
    
/* Line 351 of lalr1.java  */
/* Line 294 of "ph2.yacc"  */
    {
        System.out.println("Rule 34.1: " +
            "type → Boolean ");
    };
  break;
    

  case 45:
  if (yyn == 45)
    
/* Line 351 of lalr1.java  */
/* Line 298 of "ph2.yacc"  */
    {
        System.out.println("Rule 34.2: " +
            "type → character ");
    };
  break;
    

  case 46:
  if (yyn == 46)
    
/* Line 351 of lalr1.java  */
/* Line 302 of "ph2.yacc"  */
    {
        System.out.println("Rule 34.3: " +
            "type → integer ");
    };
  break;
    

  case 47:
  if (yyn == 47)
    
/* Line 351 of lalr1.java  */
/* Line 306 of "ph2.yacc"  */
    {
        System.out.println("Rule 34.4: " +
            "type → char ");
    };
  break;
    

  case 48:
  if (yyn == 48)
    
/* Line 351 of lalr1.java  */
/* Line 310 of "ph2.yacc"  */
    {
        System.out.println("Rule 34.5: " +
            "type → bool ");
    };
  break;
    

  case 49:
  if (yyn == 49)
    
/* Line 351 of lalr1.java  */
/* Line 314 of "ph2.yacc"  */
    {
        System.out.println("Rule 34.6: " +
            "type → int");
    };
  break;
    

  case 50:
  if (yyn == 50)
    
/* Line 351 of lalr1.java  */
/* Line 320 of "ph2.yacc"  */
    {
        System.out.println("Rule 29: " +
            "continue → continue ;");
    };
  break;
    

  case 51:
  if (yyn == 51)
    
/* Line 351 of lalr1.java  */
/* Line 326 of "ph2.yacc"  */
    {
        System.out.println("Rule 35.1: " +
            "parameter → listOfParameters ");
    };
  break;
    

  case 52:
  if (yyn == 52)
    
/* Line 351 of lalr1.java  */
/* Line 330 of "ph2.yacc"  */
    {
        System.out.println("Rule 35.2: " +
            "parameter → ε");
    };
  break;
    

  case 53:
  if (yyn == 53)
    
/* Line 351 of lalr1.java  */
/* Line 336 of "ph2.yacc"  */
    {
        System.out.println("Rule 36.1: " +
            "paramTypeList → type paramList");
    };
  break;
    

  case 54:
  if (yyn == 54)
    
/* Line 351 of lalr1.java  */
/* Line 342 of "ph2.yacc"  */
    {
        System.out.println("Rule 37.1: " +
            "statement → phrase ");
    };
  break;
    

  case 55:
  if (yyn == 55)
    
/* Line 351 of lalr1.java  */
/* Line 346 of "ph2.yacc"  */
    {
        System.out.println("Rule 37.2: " +
            "statement → compoundPhrase ");
    };
  break;
    

  case 56:
  if (yyn == 56)
    
/* Line 351 of lalr1.java  */
/* Line 350 of "ph2.yacc"  */
    {
        System.out.println("Rule 37.3: " +
            "statement → selectPhrase ");
    };
  break;
    

  case 57:
  if (yyn == 57)
    
/* Line 351 of lalr1.java  */
/* Line 354 of "ph2.yacc"  */
    {
        System.out.println("Rule 37.4: " +
            "statement → iterationPhrase ");
    };
  break;
    

  case 58:
  if (yyn == 58)
    
/* Line 351 of lalr1.java  */
/* Line 358 of "ph2.yacc"  */
    {
        System.out.println("Rule 37.5: " +
            "statement → returnPhrase ");
    };
  break;
    

  case 59:
  if (yyn == 59)
    
/* Line 351 of lalr1.java  */
/* Line 362 of "ph2.yacc"  */
    {
        System.out.println("Rule 37.6: " +
            "statement → continue");
    };
  break;
    

  case 60:
  if (yyn == 60)
    
/* Line 351 of lalr1.java  */
/* Line 368 of "ph2.yacc"  */
    {
        System.out.println("Rule 38.1: " +
            "compoundPhrase → { localDeclarations statementList }");
    };
  break;
    

  case 61:
  if (yyn == 61)
    
/* Line 351 of lalr1.java  */
/* Line 374 of "ph2.yacc"  */
    {
        System.out.println("Rule 39.1: " +
            "phrase → allExpression ; ");
    };
  break;
    

  case 62:
  if (yyn == 62)
    
/* Line 351 of lalr1.java  */
/* Line 378 of "ph2.yacc"  */
    {
        System.out.println("Rule 39.2: " +
            "phrase → ;");
    };
  break;
    

  case 63:
  if (yyn == 63)
    
/* Line 351 of lalr1.java  */
/* Line 384 of "ph2.yacc"  */
    {
        System.out.println("Rule 40.1: " +
            "iterationPhrase → till ( eachExpression ) statement");
    };
  break;
    

  case 64:
  if (yyn == 64)
    
/* Line 351 of lalr1.java  */
/* Line 390 of "ph2.yacc"  */
    {
        System.out.println("Rule 41.1: " +
            "compareType → equal ");
    };
  break;
    

  case 65:
  if (yyn == 65)
    
/* Line 351 of lalr1.java  */
/* Line 394 of "ph2.yacc"  */
    {
        System.out.println("Rule 41.2: " +
            "compareType → nonEqual");
    };
  break;
    

  case 66:
  if (yyn == 66)
    
/* Line 351 of lalr1.java  */
/* Line 400 of "ph2.yacc"  */
    {
        System.out.println("Rule 42.1: " +
            "equal → <=");
    };
  break;
    

  case 67:
  if (yyn == 67)
    
/* Line 351 of lalr1.java  */
/* Line 404 of "ph2.yacc"  */
    {
        System.out.println("Rule 42.2: " +
            "equal → >=");
    };
  break;
    

  case 68:
  if (yyn == 68)
    
/* Line 351 of lalr1.java  */
/* Line 408 of "ph2.yacc"  */
    {
        System.out.println("Rule 42.3: " +
            "equal → ==");
    };
  break;
    

  case 69:
  if (yyn == 69)
    
/* Line 351 of lalr1.java  */
/* Line 414 of "ph2.yacc"  */
    {
        System.out.println("Rule 43.1: " +
            "nonEqual → <");
    };
  break;
    

  case 70:
  if (yyn == 70)
    
/* Line 351 of lalr1.java  */
/* Line 418 of "ph2.yacc"  */
    {
        System.out.println("Rule 43.2: " +
            "nonEqual → >");
    };
  break;
    

  case 71:
  if (yyn == 71)
    
/* Line 351 of lalr1.java  */
/* Line 422 of "ph2.yacc"  */
    {
        System.out.println("Rule 43.3: " +
            "nonEqual → !=");
    };
  break;
    

  case 72:
  if (yyn == 72)
    
/* Line 351 of lalr1.java  */
/* Line 428 of "ph2.yacc"  */
    {
        System.out.println("Rule 44.1: " +
            "op → +");
    };
  break;
    

  case 73:
  if (yyn == 73)
    
/* Line 351 of lalr1.java  */
/* Line 432 of "ph2.yacc"  */
    {
        System.out.println("Rule 44.2: " +
            "op → -");
    };
  break;
    

  case 74:
  if (yyn == 74)
    
/* Line 351 of lalr1.java  */
/* Line 436 of "ph2.yacc"  */
    {
        System.out.println("Rule 44.3: " +
            "op → *");
    };
  break;
    

  case 75:
  if (yyn == 75)
    
/* Line 351 of lalr1.java  */
/* Line 440 of "ph2.yacc"  */
    {
        System.out.println("Rule 44.4: " +
            "op → /");
    };
  break;
    

  case 76:
  if (yyn == 76)
    
/* Line 351 of lalr1.java  */
/* Line 444 of "ph2.yacc"  */
    {
        System.out.println("Rule 44.5: " +
            "op → %");
    };
  break;
    

  case 77:
  if (yyn == 77)
    
/* Line 351 of lalr1.java  */
/* Line 450 of "ph2.yacc"  */
    {
        System.out.println("Rule 45.1: " +
            "unaryExpression → unaryop unaryExpression ");
    };
  break;
    

  case 78:
  if (yyn == 78)
    
/* Line 351 of lalr1.java  */
/* Line 454 of "ph2.yacc"  */
    {
        System.out.println("Rule 45.2: " +
            "unaryExpression → factor");
    };
  break;
    

  case 79:
  if (yyn == 79)
    
/* Line 351 of lalr1.java  */
/* Line 460 of "ph2.yacc"  */
    {
        System.out.println("Rule 46.1: " +
            "unaryop → - ");
    };
  break;
    

  case 80:
  if (yyn == 80)
    
/* Line 351 of lalr1.java  */
/* Line 464 of "ph2.yacc"  */
    {
        System.out.println("Rule 46.2: " +
            "unaryop → * ");
    };
  break;
    

  case 81:
  if (yyn == 81)
    
/* Line 351 of lalr1.java  */
/* Line 468 of "ph2.yacc"  */
    {
        System.out.println("Rule 46.3: " +
            "unaryop → ?");
    };
  break;
    

  case 82:
  if (yyn == 82)
    
/* Line 351 of lalr1.java  */
/* Line 474 of "ph2.yacc"  */
    {
        System.out.println("Rule 47.1: " +
            "factor → inalterable ");
    };
  break;
    

  case 83:
  if (yyn == 83)
    
/* Line 351 of lalr1.java  */
/* Line 478 of "ph2.yacc"  */
    {
        System.out.println("Rule 47.2: " +
            "factor → alterable");
    };
  break;
    

  case 84:
  if (yyn == 84)
    
/* Line 351 of lalr1.java  */
/* Line 484 of "ph2.yacc"  */
    {
        System.out.println("Rule 48.1: " +
            "inalterable → ( allExpression ) ");
    };
  break;
    

  case 85:
  if (yyn == 85)
    
/* Line 351 of lalr1.java  */
/* Line 488 of "ph2.yacc"  */
    {
        System.out.println("Rule 48.2: " +
            "inalterable → constant ");
    };
  break;
    

  case 86:
  if (yyn == 86)
    
/* Line 351 of lalr1.java  */
/* Line 492 of "ph2.yacc"  */
    {
        System.out.println("Rule 48.3: " +
            "inalterable → letter numOrletter ( args )");
    };
  break;
    

  case 87:
  if (yyn == 87)
    
/* Line 351 of lalr1.java  */
/* Line 498 of "ph2.yacc"  */
    {
        System.out.println("Rule 49.1: " +
            "args → arguments ");
    };
  break;
    

  case 88:
  if (yyn == 88)
    
/* Line 351 of lalr1.java  */
/* Line 502 of "ph2.yacc"  */
    {
        System.out.println("Rule 49.2: " +
            "args → ε");
    };
  break;
    

  case 89:
  if (yyn == 89)
    
/* Line 351 of lalr1.java  */
/* Line 508 of "ph2.yacc"  */
    {
        System.out.println("Rule 50.1: " +
            "constant → CONST");
    };
  break;
    

  case 90:
  if (yyn == 90)
    
/* Line 351 of lalr1.java  */
/* Line 512 of "ph2.yacc"  */
    {
        System.out.println("Rule 50.2: " +
            "constant → true");
    };
  break;
    

  case 91:
  if (yyn == 91)
    
/* Line 351 of lalr1.java  */
/* Line 516 of "ph2.yacc"  */
    {
        System.out.println("Rule 50.3: " +
            "constant → false");
    };
  break;
    

  case 92:
  if (yyn == 92)
    
/* Line 351 of lalr1.java  */
/* Line 522 of "ph2.yacc"  */
    {
        System.out.println("Rule 51.1: " +
            "logicOp → &&");
    };
  break;
    

  case 93:
  if (yyn == 93)
    
/* Line 351 of lalr1.java  */
/* Line 526 of "ph2.yacc"  */
    {
        System.out.println("Rule 51.1: " +
            "logicOp → and");
    };
  break;
    

  case 94:
  if (yyn == 94)
    
/* Line 351 of lalr1.java  */
/* Line 530 of "ph2.yacc"  */
    {
        System.out.println("Rule 51.1: " +
            "logicOp → or");
    };
  break;
    

  case 95:
  if (yyn == 95)
    
/* Line 351 of lalr1.java  */
/* Line 534 of "ph2.yacc"  */
    {
        System.out.println("Rule 51.1: " +
            "logicOp → ~");
    };
  break;
    

  case 96:
  if (yyn == 96)
    
/* Line 351 of lalr1.java  */
/* Line 538 of "ph2.yacc"  */
    {
        System.out.println("Rule 51.1: " +
            "logicOp → ||");
    };
  break;
    

  case 97:
  if (yyn == 97)
    
/* Line 351 of lalr1.java  */
/* Line 546 of "ph2.yacc"  */
    {
        System.out.println("Rule 52.1: " +
            "varInitialization → varForm varInitialization2");
    };
  break;
    

  case 98:
  if (yyn == 98)
    
/* Line 351 of lalr1.java  */
/* Line 552 of "ph2.yacc"  */
    {
        System.out.println("Rule 53.2: " +
            "varInitialization2 → : ( eachExpression )");
    };
  break;
    

  case 99:
  if (yyn == 99)
    
/* Line 351 of lalr1.java  */
/* Line 556 of "ph2.yacc"  */
    {
        System.out.println("Rule 53.1: " +
            "varInitialization2 → ϵ");
    };
  break;
    

  case 100:
  if (yyn == 100)
    
/* Line 351 of lalr1.java  */
/* Line 562 of "ph2.yacc"  */
    {
        System.out.println("Rule 56.1: " +
            "varForm → letter numOrletter varForm2");
    };
  break;
    

  case 101:
  if (yyn == 101)
    
/* Line 351 of lalr1.java  */
/* Line 568 of "ph2.yacc"  */
    {
        System.out.println("Rule 57.1: " +
            "varForm2 → [ num ]");
    };
  break;
    

  case 102:
  if (yyn == 102)
    
/* Line 351 of lalr1.java  */
/* Line 572 of "ph2.yacc"  */
    {
        System.out.println("Rule 57.2: " +
            "varForm2 → ϵ");
    };
  break;
    

  case 103:
  if (yyn == 103)
    
/* Line 351 of lalr1.java  */
/* Line 578 of "ph2.yacc"  */
    {
        System.out.println("Rule 58.1: " +
            "paramId → letter numOrletter paramId2");
    };
  break;
    

  case 104:
  if (yyn == 104)
    
/* Line 351 of lalr1.java  */
/* Line 584 of "ph2.yacc"  */
    {
        System.out.println("Rule 59.1: " +
            "paramId2 → ϵ");
    };
  break;
    

  case 105:
  if (yyn == 105)
    
/* Line 351 of lalr1.java  */
/* Line 588 of "ph2.yacc"  */
    {
        System.out.println("Rule 59.2: " +
            "paramId2 → [ ]");
    };
  break;
    

  case 106:
  if (yyn == 106)
    
/* Line 351 of lalr1.java  */
/* Line 594 of "ph2.yacc"  */
    {
        System.out.println("Rule 60.1: " +
            "selectPhrase → if ( eachExpression ) selectPhrase2");
    };
  break;
    

  case 107:
  if (yyn == 107)
    
/* Line 351 of lalr1.java  */
/* Line 600 of "ph2.yacc"  */
    {
        System.out.println("Rule 61.1: " +
            "selectPhrase2 → ifBody");
    };
  break;
    

  case 108:
  if (yyn == 108)
    
/* Line 351 of lalr1.java  */
/* Line 604 of "ph2.yacc"  */
    {
        System.out.println("Rule 61.2: " +
            "selectPhrase2 → { ifBody ifBody }");
    };
  break;
    

  case 109:
  if (yyn == 109)
    
/* Line 351 of lalr1.java  */
/* Line 610 of "ph2.yacc"  */
    {
        System.out.println("Rule 62.1: " +
            "ifBody → statement ifBody2");
    };
  break;
    

  case 110:
  if (yyn == 110)
    
/* Line 351 of lalr1.java  */
/* Line 614 of "ph2.yacc"  */
    {
        System.out.println("Rule 62.2: " +
            "ifBody → ;");
    };
  break;
    

  case 111:
  if (yyn == 111)
    
/* Line 351 of lalr1.java  */
/* Line 620 of "ph2.yacc"  */
    {
        System.out.println("Rule 63.2: " +
            "ifBody2 → other statement");
    };
  break;
    

  case 112:
  if (yyn == 112)
    
/* Line 351 of lalr1.java  */
/* Line 624 of "ph2.yacc"  */
    {
        System.out.println("Rule 63.1: " +
            "ifBody2 → ϵ");
    };
  break;
    

  case 113:
  if (yyn == 113)
    
/* Line 351 of lalr1.java  */
/* Line 630 of "ph2.yacc"  */
    {
        System.out.println("Rule 64.1: " +
            "allExpression → alterable allExpression3");
    };
  break;
    

  case 114:
  if (yyn == 114)
    
/* Line 351 of lalr1.java  */
/* Line 634 of "ph2.yacc"  */
    {
        System.out.println("Rule 64.2: " +
            "allExpression → eachExpression");
    };
  break;
    

  case 115:
  if (yyn == 115)
    
/* Line 351 of lalr1.java  */
/* Line 640 of "ph2.yacc"  */
    {
        System.out.println("Rule 65.1: " +
            "allExpression2 → alterable allExpression");
    };
  break;
    

  case 116:
  if (yyn == 116)
    
/* Line 351 of lalr1.java  */
/* Line 644 of "ph2.yacc"  */
    {
        System.out.println("Rule 64.2: " +
            "allExpression2 → eachExpression");
    };
  break;
    

  case 117:
  if (yyn == 117)
    
/* Line 351 of lalr1.java  */
/* Line 650 of "ph2.yacc"  */
    {
        System.out.println("Rule 66.1: " +
            "allExpression3 → mathOp allExpression2");
    };
  break;
    

  case 118:
  if (yyn == 118)
    
/* Line 351 of lalr1.java  */
/* Line 654 of "ph2.yacc"  */
    {
        System.out.println("Rule 66.2: " +
            "allExpression3 → ++");
    };
  break;
    

  case 119:
  if (yyn == 119)
    
/* Line 351 of lalr1.java  */
/* Line 658 of "ph2.yacc"  */
    {
        System.out.println("Rule 66.3: " +
            "allExpression3 → --");
    };
  break;
    

  case 120:
  if (yyn == 120)
    
/* Line 351 of lalr1.java  */
/* Line 664 of "ph2.yacc"  */
    {
        System.out.println("Rule 66.1: " +
            "allExpression4 → mathOp allExpression3");
    };
  break;
    

  case 121:
  if (yyn == 121)
    
/* Line 351 of lalr1.java  */
/* Line 671 of "ph2.yacc"  */
    {
        System.out.println("Rule 67.1: " +
            "eachExpression -> logicOp eachExpression eachExpression3");
    };
  break;
    

  case 122:
  if (yyn == 122)
    
/* Line 351 of lalr1.java  */
/* Line 675 of "ph2.yacc"  */
    {
        System.out.println("Rule 67.2: " +
            "eachExpression → relExpression eachExpression3");
    };
  break;
    

  case 123:
  if (yyn == 123)
    
/* Line 351 of lalr1.java  */
/* Line 681 of "ph2.yacc"  */
    {
        System.out.println("Rule 68.1: " +
            "eachExpression2 → logicOp eachExpression eachExpression3");
    };
  break;
    

  case 124:
  if (yyn == 124)
    
/* Line 351 of lalr1.java  */
/* Line 685 of "ph2.yacc"  */
    {
        System.out.println("Rule 68.2: " +
            "eachExpression2 → relExpression eachExpression3");
    };
  break;
    

  case 125:
  if (yyn == 125)
    
/* Line 351 of lalr1.java  */
/* Line 689 of "ph2.yacc"  */
    {
        System.out.println("Rule 68.2: " +
            "eachExpression2 → THEN_KW eachExpression");
    };
  break;
    

  case 126:
  if (yyn == 126)
    
/* Line 351 of lalr1.java  */
/* Line 693 of "ph2.yacc"  */
    {
        System.out.println("Rule 68.2: " +
            "eachExpression2 → ELSE_KW eachExpression");
    };
  break;
    

  case 127:
  if (yyn == 127)
    
/* Line 351 of lalr1.java  */
/* Line 699 of "ph2.yacc"  */
    {
        System.out.println("Rule 69.1: " +
            "eachExpression3 → logicOp eachExpression2 eachExpression3");
    };
  break;
    

  case 128:
  if (yyn == 128)
    
/* Line 351 of lalr1.java  */
/* Line 703 of "ph2.yacc"  */
    {
        System.out.println("Rule 71.2: " +
            "relExpression2 → ϵ");
    };
  break;
    

  case 129:
  if (yyn == 129)
    
/* Line 351 of lalr1.java  */
/* Line 709 of "ph2.yacc"  */
    {
        System.out.println("Rule 70.1: " +
            "relExpression → mathEXP relExpression2");
    };
  break;
    

  case 130:
  if (yyn == 130)
    
/* Line 351 of lalr1.java  */
/* Line 715 of "ph2.yacc"  */
    {
        System.out.println("Rule 71.1: " +
            "relExpression2 → compareType mathEXP");
    };
  break;
    

  case 131:
  if (yyn == 131)
    
/* Line 351 of lalr1.java  */
/* Line 719 of "ph2.yacc"  */
    {
        System.out.println("Rule 71.2: " +
            "relExpression2 → ϵ");
    };
  break;
    

  case 132:
  if (yyn == 132)
    
/* Line 351 of lalr1.java  */
/* Line 725 of "ph2.yacc"  */
    {
        System.out.println("Rule 14.1: " +
            "function → void numOrletter ( parameter ) {statement}");
    };
  break;
    

  case 133:
  if (yyn == 133)
    
/* Line 351 of lalr1.java  */
/* Line 729 of "ph2.yacc"  */
    {
        System.out.println("Rule 14.2: " +
            "function → type letter numOrletter ( parameter ) statement");
    };
  break;
    

  case 134:
  if (yyn == 134)
    
/* Line 351 of lalr1.java  */
/* Line 734 of "ph2.yacc"  */
    {
        System.out.println("Rule 31.1: " +
            "mathOp → =");
    };
  break;
    

  case 135:
  if (yyn == 135)
    
/* Line 351 of lalr1.java  */
/* Line 738 of "ph2.yacc"  */
    {
        System.out.println("Rule 31.2: " +
            "allExpression → ADDE");
    };
  break;
    

  case 136:
  if (yyn == 136)
    
/* Line 351 of lalr1.java  */
/* Line 742 of "ph2.yacc"  */
    {
        System.out.println("Rule 31.3: " +
            "allExpression → SUBE");
    };
  break;
    

  case 137:
  if (yyn == 137)
    
/* Line 351 of lalr1.java  */
/* Line 746 of "ph2.yacc"  */
    {
        System.out.println("Rule 31.4: " +
            "allExpression → MULE");
    };
  break;
    

  case 138:
  if (yyn == 138)
    
/* Line 351 of lalr1.java  */
/* Line 750 of "ph2.yacc"  */
    {
        System.out.println("Rule 31.5: " +
            "allExpression → DIVE");
    };
  break;
    

  case 139:
  if (yyn == 139)
    
/* Line 351 of lalr1.java  */
/* Line 756 of "ph2.yacc"  */
    {
        System.out.println("Rule 28.1: " +
            "returnPhrase → comeback; ");
    };
  break;
    

  case 140:
  if (yyn == 140)
    
/* Line 351 of lalr1.java  */
/* Line 760 of "ph2.yacc"  */
    {
        System.out.println("Rule 28.2: " +
            "returnPhrase → giveback allExpression ;");
    };
  break;
    

  case 141:
  if (yyn == 141)
    
/* Line 351 of lalr1.java  */
/* Line 764 of "ph2.yacc"  */
    {  //lette????
        System.out.println("Rule 28.2: " +
            "returnPhrase → giveback numOrletter ;");
    };
  break;
    

  case 142:
  if (yyn == 142)
    
/* Line 351 of lalr1.java  */
/* Line 770 of "ph2.yacc"  */
    {
        System.out.println("Rule 9.1: " +
            "variableList -> varInitialization variableList2");
    };
  break;
    

  case 143:
  if (yyn == 143)
    
/* Line 351 of lalr1.java  */
/* Line 776 of "ph2.yacc"  */
    {
        System.out.println("Rule 9.1: " +
            "variableList2 → , varInitialization variableList2");
    };
  break;
    

  case 144:
  if (yyn == 144)
    
/* Line 351 of lalr1.java  */
/* Line 780 of "ph2.yacc"  */
    {
        System.out.println("Rule 9.2: " +
            "variableList2 → ϵ ");
    };
  break;
    



/* Line 351 of lalr1.java  */
/* Line 2109 of "ph2.cacc"  */
	default: break;
      }

    yy_symbol_print ("-> $$ =", yyr1_[yyn], yyval);

    yystack.pop (yylen);
    yylen = 0;

    /* Shift the result of the reduction.  */
    yyn = yyr1_[yyn];
    int yystate = yypgoto_[yyn - yyntokens_] + yystack.stateAt (0);
    if (0 <= yystate && yystate <= yylast_
	&& yycheck_[yystate] == yystack.stateAt (0))
      yystate = yytable_[yystate];
    else
      yystate = yydefgoto_[yyn - yyntokens_];

    yystack.push (yystate, yyval);
    return YYNEWSTATE;
  }

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  private final String yytnamerr_ (String yystr)
  {
    if (yystr.charAt (0) == '"')
      {
        StringBuffer yyr = new StringBuffer ();
        strip_quotes: for (int i = 1; i < yystr.length (); i++)
          switch (yystr.charAt (i))
            {
            case '\'':
            case ',':
              break strip_quotes;

            case '\\':
	      if (yystr.charAt(++i) != '\\')
                break strip_quotes;
              /* Fall through.  */
            default:
              yyr.append (yystr.charAt (i));
              break;

            case '"':
              return yyr.toString ();
            }
      }
    else if (yystr.equals ("$end"))
      return "end of input";

    return yystr;
  }

  /*--------------------------------.
  | Print this symbol on YYOUTPUT.  |
  `--------------------------------*/

  private void yy_symbol_print (String s, int yytype,
			         Object yyvaluep				 )
  {
    if (yydebug > 0)
    yycdebug (s + (yytype < yyntokens_ ? " token " : " nterm ")
	      + yytname_[yytype] + " ("
	      + (yyvaluep == null ? "(null)" : yyvaluep.toString ()) + ")");
  }

  /**
   * Parse input from the scanner that was specified at object construction
   * time.  Return whether the end of the input was reached successfully.
   *
   * @return <tt>true</tt> if the parsing succeeds.  Note that this does not
   *          imply that there were no syntax errors.
   */
  public boolean parse () throws java.io.IOException
  {
    /// Lookahead and lookahead in internal form.
    int yychar = yyempty_;
    int yytoken = 0;

    /* State.  */
    int yyn = 0;
    int yylen = 0;
    int yystate = 0;

    YYStack yystack = new YYStack ();

    /* Error handling.  */
    int yynerrs_ = 0;
    

    /// Semantic value of the lookahead.
    Object yylval = null;

    int yyresult;

    yycdebug ("Starting parse\n");
    yyerrstatus_ = 0;


    /* Initialize the stack.  */
    yystack.push (yystate, yylval);

    int label = YYNEWSTATE;
    for (;;)
      switch (label)
      {
        /* New state.  Unlike in the C/C++ skeletons, the state is already
	   pushed when we come here.  */
      case YYNEWSTATE:
        yycdebug ("Entering state " + yystate + "\n");
        if (yydebug > 0)
          yystack.print (yyDebugStream);

        /* Accept?  */
        if (yystate == yyfinal_)
          return true;

        /* Take a decision.  First try without lookahead.  */
        yyn = yypact_[yystate];
        if (yy_pact_value_is_default_ (yyn))
          {
            label = YYDEFAULT;
	    break;
          }

        /* Read a lookahead token.  */
        if (yychar == yyempty_)
          {
	    yycdebug ("Reading a token: ");
	    yychar = yylex ();
            
            yylval = yylexer.getLVal ();
          }

        /* Convert token to internal form.  */
        if (yychar <= EOF)
          {
	    yychar = yytoken = EOF;
	    yycdebug ("Now at end of input.\n");
          }
        else
          {
	    yytoken = yytranslate_ (yychar);
	    yy_symbol_print ("Next token is", yytoken,
			     yylval);
          }

        /* If the proper action on seeing token YYTOKEN is to reduce or to
           detect an error, take that action.  */
        yyn += yytoken;
        if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yytoken)
          label = YYDEFAULT;

        /* <= 0 means reduce or error.  */
        else if ((yyn = yytable_[yyn]) <= 0)
          {
	    if (yy_table_value_is_error_ (yyn))
	      label = YYERRLAB;
	    else
	      {
	        yyn = -yyn;
	        label = YYREDUCE;
	      }
          }

        else
          {
            /* Shift the lookahead token.  */
	    yy_symbol_print ("Shifting", yytoken,
			     yylval);

            /* Discard the token being shifted.  */
            yychar = yyempty_;

            /* Count tokens shifted since error; after three, turn off error
               status.  */
            if (yyerrstatus_ > 0)
              --yyerrstatus_;

            yystate = yyn;
            yystack.push (yystate, yylval);
            label = YYNEWSTATE;
          }
        break;

      /*-----------------------------------------------------------.
      | yydefault -- do the default action for the current state.  |
      `-----------------------------------------------------------*/
      case YYDEFAULT:
        yyn = yydefact_[yystate];
        if (yyn == 0)
          label = YYERRLAB;
        else
          label = YYREDUCE;
        break;

      /*-----------------------------.
      | yyreduce -- Do a reduction.  |
      `-----------------------------*/
      case YYREDUCE:
        yylen = yyr2_[yyn];
        label = yyaction (yyn, yystack, yylen);
	yystate = yystack.stateAt (0);
        break;

      /*------------------------------------.
      | yyerrlab -- here on detecting error |
      `------------------------------------*/
      case YYERRLAB:
        /* If not already recovering from an error, report this error.  */
        if (yyerrstatus_ == 0)
          {
            ++yynerrs_;
            if (yychar == yyempty_)
              yytoken = yyempty_;
            yyerror (yysyntax_error (yystate, yytoken));
          }

        
        if (yyerrstatus_ == 3)
          {
	    /* If just tried and failed to reuse lookahead token after an
	     error, discard it.  */

	    if (yychar <= EOF)
	      {
	      /* Return failure if at end of input.  */
	      if (yychar == EOF)
	        return false;
	      }
	    else
	      yychar = yyempty_;
          }

        /* Else will try to reuse lookahead token after shifting the error
           token.  */
        label = YYERRLAB1;
        break;

      /*---------------------------------------------------.
      | errorlab -- error raised explicitly by YYERROR.  |
      `---------------------------------------------------*/
      case YYERROR:

        
        /* Do not reclaim the symbols of the rule which action triggered
           this YYERROR.  */
        yystack.pop (yylen);
        yylen = 0;
        yystate = yystack.stateAt (0);
        label = YYERRLAB1;
        break;

      /*-------------------------------------------------------------.
      | yyerrlab1 -- common code for both syntax error and YYERROR.  |
      `-------------------------------------------------------------*/
      case YYERRLAB1:
        yyerrstatus_ = 3;	/* Each real token shifted decrements this.  */

        for (;;)
          {
	    yyn = yypact_[yystate];
	    if (!yy_pact_value_is_default_ (yyn))
	      {
	        yyn += yyterror_;
	        if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
	          {
	            yyn = yytable_[yyn];
	            if (0 < yyn)
		      break;
	          }
	      }

	    /* Pop the current state because it cannot handle the error token.  */
	    if (yystack.height == 1)
	      return false;

	    
	    yystack.pop ();
	    yystate = yystack.stateAt (0);
	    if (yydebug > 0)
	      yystack.print (yyDebugStream);
          }

	

        /* Shift the error token.  */
        yy_symbol_print ("Shifting", yystos_[yyn],
			 yylval);

        yystate = yyn;
	yystack.push (yyn, yylval);
        label = YYNEWSTATE;
        break;

        /* Accept.  */
      case YYACCEPT:
        return true;

        /* Abort.  */
      case YYABORT:
        return false;
      }
  }

  // Generate an error message.
  private String yysyntax_error (int yystate, int tok)
  {
    if (errorVerbose)
      {
        /* There are many possibilities here to consider:
           - Assume YYFAIL is not used.  It's too flawed to consider.
             See
             <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
             for details.  YYERROR is fine as it does not invoke this
             function.
           - If this state is a consistent state with a default action,
             then the only way this function was invoked is if the
             default action is an error action.  In that case, don't
             check for expected tokens because there are none.
           - The only way there can be no lookahead present (in tok) is
             if this state is a consistent state with a default action.
             Thus, detecting the absence of a lookahead is sufficient to
             determine that there is no unexpected or expected token to
             report.  In that case, just report a simple "syntax error".
           - Don't assume there isn't a lookahead just because this
             state is a consistent state with a default action.  There
             might have been a previous inconsistent state, consistent
             state with a non-default action, or user semantic action
             that manipulated yychar.  (However, yychar is currently out
             of scope during semantic actions.)
           - Of course, the expected token list depends on states to
             have correct lookahead information, and it depends on the
             parser not to perform extra reductions after fetching a
             lookahead from the scanner and before detecting a syntax
             error.  Thus, state merging (from LALR or IELR) and default
             reductions corrupt the expected token list.  However, the
             list is correct for canonical LR with one exception: it
             will still contain any token that will not be accepted due
             to an error action in a later state.
        */
        if (tok != yyempty_)
          {
            // FIXME: This method of building the message is not compatible
            // with internationalization.
            StringBuffer res =
              new StringBuffer ("syntax error, unexpected ");
            res.append (yytnamerr_ (yytname_[tok]));
            int yyn = yypact_[yystate];
            if (!yy_pact_value_is_default_ (yyn))
              {
                /* Start YYX at -YYN if negative to avoid negative
                   indexes in YYCHECK.  In other words, skip the first
                   -YYN actions for this state because they are default
                   actions.  */
                int yyxbegin = yyn < 0 ? -yyn : 0;
                /* Stay within bounds of both yycheck and yytname.  */
                int yychecklim = yylast_ - yyn + 1;
                int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
                int count = 0;
                for (int x = yyxbegin; x < yyxend; ++x)
                  if (yycheck_[x + yyn] == x && x != yyterror_
                      && !yy_table_value_is_error_ (yytable_[x + yyn]))
                    ++count;
                if (count < 5)
                  {
                    count = 0;
                    for (int x = yyxbegin; x < yyxend; ++x)
                      if (yycheck_[x + yyn] == x && x != yyterror_
                          && !yy_table_value_is_error_ (yytable_[x + yyn]))
                        {
                          res.append (count++ == 0 ? ", expecting " : " or ");
                          res.append (yytnamerr_ (yytname_[x]));
                        }
                  }
              }
            return res.toString ();
          }
      }

    return "syntax error";
  }

  /**
   * Whether the given <code>yypact_</code> value indicates a defaulted state.
   * @param yyvalue   the value to check
   */
  private static boolean yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  /**
   * Whether the given <code>yytable_</code> value indicates a syntax error.
   * @param yyvalue   the value to check
   */
  private static boolean yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
  private static final short yypact_ninf_ = -194;
  private static final short yypact_[] =
  {
       127,  -194,  -194,  -194,  -194,  -194,  -194,    28,     4,  -194,
     127,  -194,    12,  -194,    12,    23,  -194,  -194,    37,  -194,
    -194,   127,    28,    44,    46,    59,    12,  -194,    23,  -194,
      17,  -194,    38,    12,  -194,    58,  -194,  -194,  -194,  -194,
    -194,    12,    60,    65,    17,    23,  -194,    28,    44,   372,
      28,  -194,    64,    63,    17,  -194,    67,    61,    68,  -194,
     372,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,
    -194,  -194,    28,   219,  -194,   206,    48,  -194,  -194,  -194,
     372,    70,   240,    72,    12,  -194,   210,    65,   210,  -194,
     121,    71,  -194,    10,  -194,  -194,  -194,  -194,  -194,  -194,
      48,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,
      48,  -194,   240,  -194,   321,  -194,    75,  -194,    64,  -194,
     184,    79,    80,    78,   358,    89,  -194,    82,  -194,  -194,
    -194,  -194,    91,  -194,  -194,  -194,  -194,  -194,  -194,  -194,
    -194,  -194,  -194,  -194,   372,  -194,   372,   372,    12,    21,
    -194,  -194,   206,  -194,   372,   372,   372,   240,   240,  -194,
    -194,    17,   210,  -194,   184,    12,  -194,   372,   372,  -194,
      34,    93,    94,  -194,  -194,  -194,   121,  -194,  -194,  -194,
      97,    95,    99,    28,  -194,  -194,  -194,  -194,   240,  -194,
    -194,  -194,    87,  -194,   210,  -194,   109,   106,   110,  -194,
    -194,  -194,  -194,  -194,   372,  -194,  -194,  -194,  -194,  -194,
    -194,  -194,   247,   210,    95,  -194,   154,    76,  -194,  -194,
    -194,  -194,   284,   210,  -194,   114,  -194,  -194
  };

  /* YYDEFACT[S] -- default reduction number in state S.  Performed when
     YYTABLE doesn't specify something else to do.  Zero means the
     default is an error.  */
  private static final short yydefact_[] =
  {
         0,    46,    44,    49,    47,    45,    48,    10,     0,    11,
      20,    39,     0,    38,     7,     4,     8,     9,     0,     1,
      12,    20,    10,   144,    99,     0,     7,     5,     4,     2,
      52,    19,   102,     0,   142,     0,    97,    40,     6,     3,
      51,     0,     0,    22,    52,     0,   100,    10,   144,     0,
      10,    53,    24,     0,     0,    13,     0,     0,   102,   143,
       0,    79,    80,    81,    92,    96,    95,    93,    94,    89,
      90,    91,    10,   131,    83,    30,     0,    78,    82,    85,
       0,     0,   128,   104,     0,    14,     0,    22,     0,   101,
      83,     0,   114,    37,    66,    69,    67,    70,    68,    71,
       0,    64,    65,   129,    72,    73,    74,    75,    76,    17,
       0,    77,   128,    98,     0,   122,     0,   103,    24,    62,
      26,     0,     0,     0,    10,     0,    59,     0,    55,    54,
      57,    56,     0,    58,    21,   133,   118,   119,   134,   135,
     136,   137,   138,   113,     0,    84,    88,     0,     0,    37,
      33,   130,    30,   121,     0,     0,     0,   128,   128,   105,
      23,     0,    28,    15,    26,     0,    43,     0,     0,   139,
      10,     0,     0,    50,   132,    61,    83,   117,   116,    87,
       0,    32,     0,    10,    36,    29,   125,   126,   128,   127,
     124,    42,     0,    16,    28,    25,     0,     0,     0,   141,
     140,   120,   115,    86,     0,    18,    34,    35,   123,    60,
      27,    41,     0,     0,    32,    62,    26,   112,   106,   107,
      63,    31,     0,     0,   109,     0,   111,   108
  };

  /* YYPGOTO[NTERM-NUM].  */
  private static final short yypgoto_[] =
  {
      -194,    -2,   101,    -6,   104,    -5,  -194,  -194,  -194,  -194,
    -194,  -194,   -88,  -194,   102,    45,    15,   -29,   -54,   -11,
     -71,   -46,  -194,    -4,   144,  -194,  -194,  -194,   -30,  -194,
     103,    96,   -77,  -194,  -194,  -194,  -194,  -194,  -194,  -194,
      85,  -194,  -194,  -194,  -194,  -194,   -64,   115,  -194,  -194,
    -194,    74,  -194,  -194,  -194,  -193,  -194,   -55,  -194,   -21,
    -194,   -42,  -194,  -102,    42,  -194,  -194,  -194,  -194,    -3,
     117
  };

  /* YYDEFGOTO[NTERM-NUM].  */
  private static final short
  yydefgoto_[] =
  {
        -1,    16,    29,    72,    27,    93,     8,     9,    40,    51,
     162,   192,    73,   179,    20,    55,    85,   163,   193,   109,
     205,    90,   149,   150,    21,    11,   164,   165,    12,   126,
      42,    43,   217,   128,   129,   130,   100,   101,   102,   110,
      75,    76,    77,    78,   180,    79,    80,    23,    36,    24,
      46,    52,   117,   131,   218,   219,   224,   132,   177,   143,
     202,    92,   157,   115,    82,   103,    13,   144,   133,    25,
      34
  };

  /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule which
     number is the opposite.  If YYTABLE_NINF_, syntax error.  */
  private static final short yytable_ninf_ = -10;
  private static final short
  yytable_[] =
  {
        41,    17,    18,    74,    19,    91,    22,    81,    26,   127,
     153,   135,   151,    28,    41,    14,    17,    32,   114,   146,
      26,   147,   152,   222,    41,   148,    28,    47,    15,   225,
      74,    14,   147,    15,    74,    50,   148,    14,   112,    15,
      -9,    17,    58,    57,    17,    83,    30,    44,   114,    45,
     156,    14,    33,    35,    74,   189,   190,    60,     1,     2,
       3,     4,     5,     6,    74,    37,    17,    49,    74,   172,
      53,    54,    84,    89,    61,    62,    86,    88,    50,    45,
     113,   145,    63,   116,   169,   194,   208,   159,   167,   168,
     166,   181,   182,   114,   114,   173,   174,   175,   176,   199,
     200,   209,   178,   204,    69,    70,    71,   203,    74,    74,
      74,   206,   186,   187,   188,   211,   212,   194,   170,   171,
     213,    74,    74,    31,   114,   197,   198,   223,   227,    39,
      38,   191,   134,   160,   166,   195,   220,   136,   137,   138,
     210,   185,   183,   221,    10,   184,   226,    56,    48,   214,
      87,   139,   140,   141,   142,   201,   158,    14,   118,    47,
     215,   111,   196,    60,    17,    59,     0,   120,     1,     2,
       3,     4,     5,     6,     7,     0,     0,    17,   207,     0,
      61,    62,     0,     0,     0,     0,   166,     0,    63,    64,
      65,    66,    67,    68,   161,     1,     2,     3,     4,     5,
       6,     0,   121,     0,     0,     0,   122,   123,   124,   125,
      69,    70,    71,    14,     0,     0,   119,     0,     0,    60,
       0,     0,     0,   120,   161,     1,     2,     3,     4,     5,
       6,   104,   105,   106,   107,   108,    61,    62,    94,    95,
      96,    97,    98,    99,    63,    64,    65,    66,    67,    68,
      14,     0,     0,   215,     0,     0,    60,     0,   121,     0,
     216,     0,   122,   123,   124,   125,    69,    70,    71,     0,
       0,     0,     0,    61,    62,    64,    65,    66,    67,    68,
       0,    63,    64,    65,    66,    67,    68,    14,     0,     0,
     215,     0,     0,    60,     0,   121,     0,   120,     0,   122,
     123,   124,   125,    69,    70,    71,     0,     0,     0,     0,
      61,    62,     0,     0,     0,     0,     0,     0,    63,    64,
      65,    66,    67,    68,    14,     0,     0,     0,     0,     0,
      60,     0,   121,     0,     0,     0,   122,   123,   124,   125,
      69,    70,    71,     0,     0,     0,     0,    61,    62,     0,
       0,     0,     0,     0,     0,    63,    64,    65,    66,    67,
      68,    14,     0,    15,     0,     0,     0,    60,     0,     0,
     154,   155,     0,     0,     0,    14,     0,    69,    70,    71,
       0,    60,     0,     0,    61,    62,     0,     0,     0,     0,
       0,     0,    63,    64,    65,    66,    67,    68,    61,    62,
       0,     0,     0,     0,     0,     0,    63,    64,    65,    66,
      67,    68,     0,     0,    69,    70,    71,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    69,    70,
      71
  };

  /* YYCHECK.  */
  private static final short
  yycheck_[] =
  {
        30,     7,     7,    49,     0,    60,    12,    49,    14,    86,
     112,    88,   100,    15,    44,     3,    22,    22,    82,     9,
      26,    11,   110,   216,    54,    15,    28,    33,     5,   222,
      76,     3,    11,     5,    80,    41,    15,     3,    80,     5,
       6,    47,    47,    45,    50,    50,     9,     9,   112,    11,
     114,     3,     8,     7,   100,   157,   158,     9,    41,    42,
      43,    44,    45,    46,   110,     6,    72,     9,   114,   124,
      10,     6,     8,    12,    26,    27,    13,    10,    84,    11,
      10,    10,    34,    11,     6,   162,   188,    12,     9,     9,
     120,   146,   147,   157,   158,     6,    14,     6,   144,     6,
       6,    14,   144,     8,    56,    57,    58,    10,   154,   155,
     156,    12,   154,   155,   156,     6,    10,   194,   124,   124,
      10,   167,   168,    21,   188,   167,   168,    51,    14,    28,
      26,   161,    87,   118,   164,   164,   213,    16,    17,    18,
     194,   152,   148,   214,     0,   149,   223,    44,    33,   204,
      54,    30,    31,    32,    33,   176,   114,     3,    84,   165,
       6,    76,   165,     9,   170,    48,    -1,    13,    41,    42,
      43,    44,    45,    46,    47,    -1,    -1,   183,   183,    -1,
      26,    27,    -1,    -1,    -1,    -1,   216,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,     3,    -1,    -1,     6,    -1,    -1,     9,
      -1,    -1,    -1,    13,    40,    41,    42,    43,    44,    45,
      46,    25,    26,    27,    28,    29,    26,    27,    19,    20,
      21,    22,    23,    24,    34,    35,    36,    37,    38,    39,
       3,    -1,    -1,     6,    -1,    -1,     9,    -1,    48,    -1,
      13,    -1,    52,    53,    54,    55,    56,    57,    58,    -1,
      -1,    -1,    -1,    26,    27,    35,    36,    37,    38,    39,
      -1,    34,    35,    36,    37,    38,    39,     3,    -1,    -1,
       6,    -1,    -1,     9,    -1,    48,    -1,    13,    -1,    52,
      53,    54,    55,    56,    57,    58,    -1,    -1,    -1,    -1,
      26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,     3,    -1,    -1,    -1,    -1,    -1,
       9,    -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    -1,    -1,    -1,    -1,    26,    27,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,
      39,     3,    -1,     5,    -1,    -1,    -1,     9,    -1,    -1,
      49,    50,    -1,    -1,    -1,     3,    -1,    56,    57,    58,
      -1,     9,    -1,    -1,    26,    27,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    26,    27,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    -1,    -1,    56,    57,    58,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    57,
      58
  };

  /* STOS_[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
  private static final short
  yystos_[] =
  {
         0,    41,    42,    43,    44,    45,    46,    47,    66,    67,
      84,    85,    88,   126,     3,     5,    61,    63,    65,     0,
      74,    84,    63,   107,   109,   129,    63,    64,    61,    62,
       9,    74,    65,     8,   130,     7,   108,     6,    64,    62,
      68,    88,    90,    91,     9,    11,   110,    63,   107,     9,
      63,    69,   111,    10,     6,    75,    90,    61,    65,   130,
       9,    26,    27,    34,    35,    36,    37,    38,    39,    56,
      57,    58,    63,    72,    81,   100,   101,   102,   103,   105,
     106,   121,   124,    65,     8,    76,    13,    91,    10,    12,
      81,   117,   121,    65,    19,    20,    21,    22,    23,    24,
      96,    97,    98,   125,    25,    26,    27,    28,    29,    79,
      99,   100,   121,    10,   106,   123,    11,   112,   111,     6,
      13,    48,    52,    53,    54,    55,    89,    92,    93,    94,
      95,   113,   117,   128,    75,    92,    16,    17,    18,    30,
      31,    32,    33,   119,   127,    10,     9,    11,    15,    82,
      83,    72,    72,   123,    49,    50,   106,   122,   124,    12,
      76,    40,    70,    77,    86,    87,    88,     9,     9,     6,
      63,    65,   117,     6,    14,     6,    81,   118,   121,    73,
     104,   117,   117,    63,    83,    79,   121,   121,   121,   123,
     123,    88,    71,    78,    92,    77,   129,   121,   121,     6,
       6,   119,   120,    10,     8,    80,    12,    65,   123,    14,
      78,     6,    10,    10,   117,     6,    13,    92,   114,   115,
      92,    80,   115,    51,   116,   115,    92,    14
  };

  /* TOKEN_NUMBER_[YYLEX-NUM] -- Internal symbol number corresponding
     to YYLEX-NUM.  */
  private static final short
  yytoken_number_[] =
  {
         0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314
  };

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
  private static final short
  yyr1_[] =
  {
         0,    60,    61,    62,    62,    63,    64,    64,    65,    65,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      74,    75,    75,    76,    76,    77,    77,    78,    78,    79,
      79,    80,    80,    81,    82,    82,    83,    83,    84,    84,
      85,    86,    87,    87,    88,    88,    88,    88,    88,    88,
      89,    90,    90,    91,    92,    92,    92,    92,    92,    92,
      93,    94,    94,    95,    96,    96,    97,    97,    97,    98,
      98,    98,    99,    99,    99,    99,    99,   100,   100,   101,
     101,   101,   102,   102,   103,   103,   103,   104,   104,   105,
     105,   105,   106,   106,   106,   106,   106,   107,   108,   108,
     109,   110,   110,   111,   112,   112,   113,   114,   114,   115,
     115,   116,   116,   117,   117,   118,   118,   119,   119,   119,
     120,   121,   121,   122,   122,   122,   122,   123,   123,   124,
     125,   125,   126,   126,   127,   127,   127,   127,   127,   128,
     128,   128,   129,   130,   130
  };

  /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
  private static final byte
  yyr2_[] =
  {
         0,     2,     2,     2,     0,     2,     2,     0,     1,     1,
       0,     1,     2,     2,     2,     1,     1,     2,     2,     2,
       0,     3,     0,     3,     0,     2,     0,     2,     0,     3,
       0,     3,     0,     3,     3,     3,     2,     0,     1,     1,
       3,     3,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     0,     2,     1,     1,     1,     1,     1,     1,
       4,     2,     1,     5,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     3,     1,     5,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     4,     0,
       3,     3,     0,     3,     0,     2,     5,     1,     4,     2,
       1,     2,     0,     2,     1,     2,     1,     2,     1,     1,
       1,     3,     2,     3,     2,     2,     2,     3,     0,     2,
       2,     0,     8,     7,     1,     1,     1,     1,     1,     2,
       3,     3,     2,     3,     0
  };

  /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
     First, the terminals, then, starting at \a yyntokens_, nonterminals.  */
  private static final String yytname_[] =
  {
    "$end", "error", "$undefined", "LETTER", "WHITESPACE", "NUM",
  "SEMICOLON", "COLON", "COMMA", "LP", "RP", "LB", "RB", "LCB", "RCB",
  "DOT", "PLUSPLUS", "MINUSMINUS", "ASSIGN", "LE", "LT", "GE", "GT",
  "EQUAL", "NOT_EQUAL", "ADD", "SUB", "MUL", "DIV", "MOD", "ADDE", "SUBE",
  "MULE", "DIVE", "QUEST", "ANDAND", "OROR", "TILDA", "AND", "OR",
  "STATIC_KW", "INTEGER_KW", "BOOLEAN_KW", "INT_KW", "CHAR_KW",
  "CHARACTER_KW", "BOOL_KW", "VOID_KW", "IF_KW", "THEN_KW", "ELSE_KW",
  "OTHER_KW", "TILL_KW", "COMEBACK_KW", "GIVEBACK_KW", "CONTINUE_KW",
  "CONST_KW", "TRUE_KW", "FALSE_KW", "COMMENT", "$accept", "num", "num2",
  "letter", "letter2", "numOrletter", "program", "list",
  "listOfParameters", "paramList", "localDeclarations", "statementList",
  "mathEXP", "arguments", "list2", "listOfParameters2", "paramList2",
  "localDeclarations2", "statementList2", "mathEXP2", "arguments2",
  "alterable", "alterable2", "alterable3", "declaration", "varDeclaration",
  "ScopedVariableDec", "scopedSpecifier", "type", "continue", "parameter",
  "paramTypeList", "statement", "compoundPhrase", "phrase",
  "iterationPhrase", "compareType", "equal", "nonEqual", "op",
  "unaryExpression", "unaryop", "factor", "inalterable", "args",
  "constant", "logicOp", "varInitialization", "varInitialization2",
  "varForm", "varForm2", "paramId", "paramId2", "selectPhrase",
  "selectPhrase2", "ifBody", "ifBody2", "allExpression", "allExpression2",
  "allExpression3", "allExpression4", "eachExpression", "eachExpression2",
  "eachExpression3", "relExpression", "relExpression2", "function",
  "mathOp", "returnPhrase", "variableList", "variableList2", null
  };

  /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
  private static final short yyrhs_[] =
  {
        66,     0,    -1,     5,    62,    -1,    61,    62,    -1,    -1,
       3,    64,    -1,    63,    64,    -1,    -1,    61,    -1,    63,
      -1,    -1,    67,    -1,    84,    74,    -1,    91,    75,    -1,
     111,    76,    -1,    77,    -1,    78,    -1,   100,    79,    -1,
     117,    80,    -1,    84,    74,    -1,    -1,     6,    91,    75,
      -1,    -1,     8,   111,    76,    -1,    -1,    86,    77,    -1,
      -1,    92,    78,    -1,    -1,    99,    72,    79,    -1,    -1,
       8,   117,    80,    -1,    -1,    63,    65,    83,    -1,    11,
     117,    12,    -1,    15,    63,    65,    -1,    82,    83,    -1,
      -1,   126,    -1,    85,    -1,    88,   129,     6,    -1,    87,
     129,     6,    -1,    40,    88,    -1,    88,    -1,    42,    -1,
      45,    -1,    41,    -1,    44,    -1,    46,    -1,    43,    -1,
      55,     6,    -1,    68,    -1,    -1,    88,    69,    -1,    94,
      -1,    93,    -1,   113,    -1,    95,    -1,   128,    -1,    89,
      -1,    13,    70,    71,    14,    -1,   117,     6,    -1,     6,
      -1,    52,     9,   121,    10,    92,    -1,    97,    -1,    98,
      -1,    19,    -1,    21,    -1,    23,    -1,    20,    -1,    22,
      -1,    24,    -1,    25,    -1,    26,    -1,    27,    -1,    28,
      -1,    29,    -1,   101,   100,    -1,   102,    -1,    26,    -1,
      27,    -1,    34,    -1,   103,    -1,    81,    -1,     9,   117,
      10,    -1,   105,    -1,    63,    65,     9,   104,    10,    -1,
      73,    -1,    -1,    56,    -1,    57,    -1,    58,    -1,    35,
      -1,    38,    -1,    39,    -1,    37,    -1,    36,    -1,   109,
     108,    -1,     7,     9,   121,    10,    -1,    -1,    63,    65,
     110,    -1,    11,    61,    12,    -1,    -1,    63,    65,   112,
      -1,    -1,    11,    12,    -1,    48,     9,   121,    10,   114,
      -1,   115,    -1,    13,   115,   115,    14,    -1,    92,   116,
      -1,     6,    -1,    51,    92,    -1,    -1,    81,   119,    -1,
     121,    -1,    81,   120,    -1,   121,    -1,   127,   118,    -1,
      16,    -1,    17,    -1,   119,    -1,   106,   121,   123,    -1,
     124,   123,    -1,   106,   121,   123,    -1,   124,   123,    -1,
      49,   121,    -1,    50,   121,    -1,   106,   122,   123,    -1,
      -1,    72,   125,    -1,    96,    72,    -1,    -1,    47,    65,
       9,    90,    10,    13,    92,    14,    -1,    88,    63,    65,
       9,    90,    10,    92,    -1,    18,    -1,    30,    -1,    31,
      -1,    32,    -1,    33,    -1,    53,     6,    -1,    54,   117,
       6,    -1,    54,    65,     6,    -1,   107,   130,    -1,     8,
     107,   130,    -1,    -1
  };

  /* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
     YYRHS.  */
  private static final short yyprhs_[] =
  {
         0,     0,     3,     6,     9,    10,    13,    16,    17,    19,
      21,    22,    24,    27,    30,    33,    35,    37,    40,    43,
      46,    47,    51,    52,    56,    57,    60,    61,    64,    65,
      69,    70,    74,    75,    79,    83,    87,    90,    91,    93,
      95,    99,   103,   106,   108,   110,   112,   114,   116,   118,
     120,   123,   125,   126,   129,   131,   133,   135,   137,   139,
     141,   146,   149,   151,   157,   159,   161,   163,   165,   167,
     169,   171,   173,   175,   177,   179,   181,   183,   186,   188,
     190,   192,   194,   196,   198,   202,   204,   210,   212,   213,
     215,   217,   219,   221,   223,   225,   227,   229,   232,   237,
     238,   242,   246,   247,   251,   252,   255,   261,   263,   268,
     271,   273,   276,   277,   280,   282,   285,   287,   290,   292,
     294,   296,   300,   303,   307,   310,   313,   316,   320,   321,
     324,   327,   328,   337,   345,   347,   349,   351,   353,   355,
     358,   362,   366,   369,   373
  };

  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
  private static final short yyrline_[] =
  {
         0,    64,    64,    70,    74,    81,    87,    91,    98,   102,
     106,   113,   119,   126,   132,   138,   144,   150,   156,   164,
     168,   174,   178,   184,   188,   194,   198,   204,   208,   214,
     218,   224,   228,   235,   241,   245,   251,   255,   262,   266,
     272,   278,   284,   288,   294,   298,   302,   306,   310,   314,
     320,   326,   330,   336,   342,   346,   350,   354,   358,   362,
     368,   374,   378,   384,   390,   394,   400,   404,   408,   414,
     418,   422,   428,   432,   436,   440,   444,   450,   454,   460,
     464,   468,   474,   478,   484,   488,   492,   498,   502,   508,
     512,   516,   522,   526,   530,   534,   538,   546,   552,   556,
     562,   568,   572,   578,   584,   588,   594,   600,   604,   610,
     614,   620,   624,   630,   634,   640,   644,   650,   654,   658,
     664,   671,   675,   681,   685,   689,   693,   699,   703,   709,
     715,   719,   725,   729,   734,   738,   742,   746,   750,   756,
     760,   764,   770,   776,   780
  };

  // Report on the debug stream that the rule yyrule is going to be reduced.
  private void yy_reduce_print (int yyrule, YYStack yystack)
  {
    if (yydebug == 0)
      return;

    int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    /* Print the symbols being reduced, and their result.  */
    yycdebug ("Reducing stack by rule " + (yyrule - 1)
	      + " (line " + yylno + "), ");

    /* The symbols being reduced.  */
    for (int yyi = 0; yyi < yynrhs; yyi++)
      yy_symbol_print ("   $" + (yyi + 1) + " =",
		       yyrhs_[yyprhs_[yyrule] + yyi],
		       ((yystack.valueAt (yynrhs-(yyi + 1)))));
  }

  /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
  private static final byte yytranslate_table_[] =
  {
         0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59
  };

  private static final byte yytranslate_ (int t)
  {
    if (t >= 0 && t <= yyuser_token_number_max_)
      return yytranslate_table_[t];
    else
      return yyundef_token_;
  }

  private static final int yylast_ = 430;
  private static final int yynnts_ = 71;
  private static final int yyempty_ = -2;
  private static final int yyfinal_ = 19;
  private static final int yyterror_ = 1;
  private static final int yyerrcode_ = 256;
  private static final int yyntokens_ = 60;

  private static final int yyuser_token_number_max_ = 314;
  private static final int yyundef_token_ = 2;

/* User implementation code.  */
/* Unqualified %code blocks.  */

/* Line 927 of lalr1.java  */
/* Line 8 of "ph2.yacc"  */

    static PrintStream writer;

    public static void main(String args[]) throws IOException, FileNotFoundException {
        YYParser yyparser;
        final Yylex lexer;

        writer = new PrintStream(new File("output.txt"));
        lexer = new Yylex(new InputStreamReader(new FileInputStream("Code.txt")));

        yyparser = new YYParser(new Lexer() {

            @Override
            public int yylex() {
                int yyl_return = -1;
                try {

                    yyl_return = lexer.yylex();
                } catch (IOException e) {
                    System.err.println("IO error :" + e);
                }
                return yyl_return;
            }

            @Override
            public void yyerror(String error) {
                System.err.println("Error : " + error);
            }

            @Override
            public Object getLVal() {
                return null;
            }
        });
        yyparser.parse();

        return;
    }



/* Line 927 of lalr1.java  */
/* Line 3025 of "ph2.cacc"  */

}


